【const】
1. const修饰的类型或变量值不可更改，如果编译中某个值确定保持不变，则该变量可以const
2. const在*左边，被指物是常量，在*右边，指针是常量，出现在两边，则都是常量;
2. 关键字在const前后的含义都是一样的，如：
void f1(const Widget* p)
void f1(Widget const * p)
3. const只是给出分配的内存地址，在程序运行过程中只有一份拷贝，提高了效率
4. 带const的参数传递
C++参数传递大多用&引用传递，因为值传递会先建立一个对象副本，为形参重新分配内存，然后将实参的值拷贝进去。而&直接传递地址，提高效率。
const会防止误修改函数参数的值
5. 参数传递
（1）传递引用：C++参数传递大多用&引用传递，因为值传递会先建立一个对象副本，为形参重新分配内存，然后将实参的值拷贝进去。而&直接传递地址，提高效率。
（2）传递参数：在函数内部不该更改
6. const修饰的成员函数
（1）不能修改任何成员变量
（2）不能调用非const成员函数
如：int * mallocA() const {}
7. const修饰函数返回值
如：const int * mallocA(){}
8. 函数返回值为值传递时，会把返回值复制到外部临时存储单元，加const无意义。
如：int GetInt(void) 就不要写成void GetInt(void)
9. 如果类的成员函数里面不会改变对象的状态，那么这个成员函数就该被声明成const
10. pass-by-reference-to-const
对比pass-by-value，最好用pass-by-reference-to-const，因为：
（1）值传递在调用和返回时都会创建副本，额外分配内存。而reference引用传递传的是地址，减少内存开销。
（2）const很重要，会保证传来的对象不会被修改
只有当对象是内置类型、STL迭代器和函数对象时，用pass-by-value更合适。用户自定义类型最好用pass-by-reference-to-const。
注意，const成员函数不能改变任何non-static成员变量；
11. const的non-const孪生兄弟函数
在C++中，可以构造与const同名的non-const函数，并在non-const函数中调用这个const函数，只需要在调用过程中进行两次转型操作：
转型1：static_cast，作用是为调用const函数的指针对象参数添加const
转型2：const_cast，作用是从返回值中移除const
如：
const char& operator[] (std::size_t position) const {
  ...
  return text[position]
}
char& operator[] (std::size_t position) {
  return 
    const_catst<char&>(
      static_cast<const TextBlock&>(*this)
        [position]
    );
 }
  因此，我们可以运用const成员函数实现其non-const孪生兄弟，可以避免代码重复。然而，反过来却不能成立。不能在const函数中调用non-const函数，因为这是一种错误的行为。
【mutable】
const反义词，可以在const声明的成员函数中突破const限制，用来修改一些与对象状态无关的变量

【其他】
在C++中已经用const完全取代了define，define也是宏定义，指代的变量也无法改变，效率比const差很多。
两者差别：
（1）编译器处理处理方式
define——预处理阶段替换
const——编译期确定值
（2）类型检查 
define——无数据类型类型，不进行类型安全检查，因此会出现错误
const——有数据类型，编译时会类型检查
（3）内存
define——不分配内存，给出立即数，使用多少次就替换多少次，内存中就有多少个拷贝，消耗内存
const——静态存储区分配空间，运行过程中内存只有一个拷贝。而且编译时不分配内存空间，而是保存在符号表中，没有了存储与读取操作，提高了效率。

【总结】
const可操作的对象：
1. 指针，迭代器
2. 指针，迭代器，reference指涉的对象
3. 函数参数和返回类型上
4. loca变量，成员函数上等

【参考】
《Effective C++》第三版 条款03
http://www.cnblogs.com/xudong-bupt/p/3509567.html
http://blog.csdn.net/yingyujianmo/article/details/51206460
