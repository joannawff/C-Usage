计算的例子：
int b;
char a[10];
char* p=a;
char b[20] = "0123456789"

1. 获取字符串长度
（1）sizeof()
是一种算符，得到对象所占空间的字节数；对于变量，得到变量所占空间的大小；对于数组，得到数组的长度；对于指针，得到指针所占内存大小，而非其指向的内存大小；
eg:sizeof("abc\0de") = 7
    sizeof(a) = 10
    sizeof(a[2]) = 1
    sizeof(p) = 4 p是指向字符数组的字符指针，计算的是指针所占内存的大小，是长整型的，即4
    sizeof(*p) = 1 *p是数组中的第一个字符，计算的是数组中第一位所占内存的大小，char类型为1
  sizeof的大小在编译期就决定了，不受存储内容所改变，如sizeof(b)=20
  sizeof因为是一种算符，因此在计算类型时必须加括号，而在计算变量时可以不加括号，如sizeof b = 20
  
    
（2）strlen()
是一个函数，计算的是字符数组的实际长度，而非类型占内存的大小。
得到字符数组第一个'\0'之前的字节数，只能用变量char*作为其参数，必须以\0为结束如，且必须带括号；
注意，未对一个数组初始化时，用strlen可能得到一个很大的数，因为一直没有找到'\0'。因此，用strlen时一定要以0结束。
eg:strlen("abc\0de") = 3
    strlen(p) = 10 要计算指针指向的字符数组的实际大小，必须用strlen
另外，strlen的大小在运行时才决定，如strlen(b)=10
（3）len
函数库里没有直接用.len来求长度的，一般出现在结构体中，如:
struct{int len;int id}s
因此才会有s.len这种表达
（4）size()
是求sgtring类对象的成员函数，计算当前容器拥有元素的个数
如：std::vector<string> a(10)
    则a.size()=0
（5）length()
   是求string类对象的成员函数，与size()相同
（6）capacity()
计算容器在分配时的大小，若重新分配则大小就改变为新分配的容量大小
如: std::vector<string> a(10)
    则a.capacity()=10
    
【扩展】
size_t：无符号整型，保存整数，sizeof的返回结果类型，是用来记录大小的数据类型，目标平台下最大的存储类型，其大小足以保证存储内存中对象的大小
32位系统中，size_t大小4字节；64位系统，size_t大小8字节
size_t常是unsigned int
【参考】
https://zhidao.baidu.com/question/212315411.html
